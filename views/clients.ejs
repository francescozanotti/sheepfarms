<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>SheepFarm - Clients</title>
  <link rel="stylesheet" href="/css/styles.css">
  <style>
    .grid-container {
      display: flex;
      flex-direction: column;
      gap: 2rem;
    }
    
    .render-nodes {
      margin-top: 2rem;
    }
    
    .node-card {
      background-color: #f5f5f5;
      border: 1px solid #ddd;
      border-radius: 4px;
      padding: 1rem;
      margin-bottom: 1rem;
    }
    
    .node-card h3 {
      margin-top: 0;
    }
    
    .node-status {
      display: inline-block;
      padding: 0.25rem 0.5rem;
      border-radius: 3px;
      font-size: 0.8rem;
      margin-bottom: 0.5rem;
    }
    
    .status-online {
      background-color: #d4edda;
      color: #155724;
    }
    
    .status-offline {
      background-color: #f8d7da;
      color: #721c24;
    }
    
    .status-rendering {
      background-color: #cce5ff;
      color: #004085;
    }
  </style>
</head>
<body>
  <div class="app-container">
    <div class="sidebar">
      <div class="logo">
        <h2>SheepFarm</h2>
      </div>
      <nav>
        <ul>
          <li><a href="/dashboard">Dashboard</a></li>
          <li><a href="/clients" class="active">Clients</a></li>
        </ul>
      </nav>
      <div class="logout">
        <a href="/logout">Logout</a>
      </div>
    </div>
    
    <div class="main-content">
      <header>
        <h1>Farm Management</h1>
        <div class="user-info">
          Welcome, <%= username %>
        </div>
      </header>
      
      <div class="grid-container">
        <!-- Sheep Clients Section -->
        <div class="clients-content">

          <!-- add new lcients - deprecated -->
          <!-- <div class="actions">
            <button id="addClientBtn" class="action-button">Add New Client</button>
          </div> -->

          <!-- <div id="addClientForm" class="client-form hidden">
            <h2>Add New Client</h2>
            <form id="clientForm">
              <div class="form-group">
                <label for="name">Name:</label>
                <input type="text" id="name" name="name" required>
              </div>
              
              <div class="form-group">
                <label for="breed">Breed:</label>
                <input type="text" id="breed" name="breed" required>
              </div>
              
              <div class="form-group">
                <label for="age">Age:</label>
                <input type="number" id="age" name="age" min="0" max="20" required>
              </div>
              
              <div class="form-actions">
                <button type="submit" class="save-button">Save</button>
                <button type="button" class="cancel-button" id="cancelBtn">Cancel</button>
              </div>
            </form>
          </div> -->
          
          <div class="clients-grid">
            <h2>Sheep Clients</h2>
            <div id="clientsList" class="grid">
              <% if (clients.length > 0) { %>
                <% clients.forEach(client => { %>
                  <div class="client-card">
                    <h3><%= client.name %></h3>
                    <p>Breed: <%= client.breed %></p>
                    <p>Age: <%= client.age %></p>
                  </div>
                <% }); %>
              <% } else { %>
                <p class="no-data">No clients available</p>
              <% } %>
            </div>
          </div>
        </div>
        
        <!-- Render Nodes Section -->
        <div class="render-nodes">
          <div class="actions">
            <button id="syncClientsBtn" class="action-button">Sync Folders</button>
            <button id="startRenderBtn" class="action-button">Start Rendering</button>
            <button id="stopRenderBtn" class="action-button">Stop Rendering</button>
          </div>
          
          <div class="nodes-grid">
            <h2>Render Nodes</h2>
            <div id="renderNodesList" class="grid">
              <!-- Render nodes will be populated here via WebSocket -->
              <p class="no-data">No render nodes connected</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <script>
    const clientsList = document.getElementById('clientsList');
    const renderNodesList = document.getElementById('renderNodesList');

    const syncClientsBtn = document.getElementById('syncClientsBtn');
    const startRenderBtn = document.getElementById('startRenderBtn');
    const stopRenderBtn = document.getElementById('stopRenderBtn');
    
    // Connect WebSocket
    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
    const socket = new WebSocket(`${protocol}//${window.location.host}`);
    
    // Handle render node actions
    syncClientsBtn.addEventListener('click', () => {
        socket.send(JSON.stringify({
            type: 'syncRequest'
        }));
    });

    startRenderBtn.addEventListener('click', () => {
      socket.send(JSON.stringify({
        type: 'renderingState',
        isRendering: true
      }));
    });
    
    stopRenderBtn.addEventListener('click', () => {
      socket.send(JSON.stringify({
        type: 'renderingState',
        isRendering: false
      }));
    });
    
    // WebSocket message handling
    socket.onmessage = function(event) {
        try {
            const message = JSON.parse(event.data);

            if (message.type === 'clientsList') {
                console.log("Received updated client list:", message.data);

<<<<<<< HEAD
      if (clients.length > 0) {
        clients.forEach(client => {
          const clientEl = document.createElement('div');
          clientEl.className = 'client-card';
          clientEl.innerHTML = `
                            <h3>${client.hostname}</h3>
                            <p><strong>Description:</strong> ${client.description}</p>
                            <p><strong>Files Rendered:</strong> ${client.files.length}</p>
                            <p><strong>Status:</strong> ${client.isRendering ? 'Rendering' : 'Idle'}</p>
                            <p><strong>Last Seen:</strong> ${new Date(client.lastSeen).toLocaleString()}</p>
                            <p><strong>Age:</strong> ${ageInSeconds} seconds</p>
                            <p><strong>Houdini Versions:</strong> ${houdiniList}</p>
                            <p class="${syncClass}">${client.isSynced ? 'Synced ✅' : 'Not Synced ❌'}</p>
          `;
          clientsList.appendChild(clientEl);
        });
      } else {
        clientsList.innerHTML = '<p class="no-data">No connected machines</p>';
      }
    }
  } catch (error) {
    console.error('Error handling message:', error);
  }
};
=======
                clientsList.innerHTML = '';

                if (message.data.length > 0) {
                    message.data.forEach(client => {
                        const clientEl = document.createElement('div');
                        clientEl.className = 'client-card';

                        let syncClass = client.isSynced ? 'status-synced' : 'status-not-synced';

                        clientEl.innerHTML = `
                          <h3>${client.hostname}</h3>
                          <p>Files Rendered: ${client.files.length}</p>
                          <p>Status: ${client.isRendering ? 'Rendering' : 'Idle'}</p>
                          <p>Last Seen: ${new Date(client.lastSeen).toLocaleString()}</p>
                          <p class="${syncClass}">${client.isSynced ? 'Synced ✅' : 'Not Synced ❌'}</p>
                        `;

                        clientsList.appendChild(clientEl);
                    });
                }
                else {
                    clientsList.innerHTML = '<p class="no-data">No connected machines</p>';
                }
            }
        }
        catch (error) {
            console.error('Error handling message:', error);
        }
    };
>>>>>>> parent of dc1c040 (Revert "dont reject client if client is not synced . many edits")


    // Request initial data
    socket.onopen = function() {
      socket.send(JSON.stringify({
        type: 'getClients'
      }));
      
      socket.send(JSON.stringify({
        type: 'getNodes'
      }));
    };
    

    socket.onerror = function(error) {
      console.error('WebSocket error:', error);
    };
  </script>
</body>
</html>