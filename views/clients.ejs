<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>SheepFarm - Clients</title>
  <link rel="stylesheet" href="/css/styles.css">
  <style>
    .grid-container {
      display: flex;
      flex-direction: column;
      gap: 2rem;
    }
    
    .render-nodes {
      margin-top: 2rem;
    }
    
    .node-card {
      background-color: #f5f5f5;
      border: 1px solid #ddd;
      border-radius: 4px;
      padding: 1rem;
      margin-bottom: 1rem;
    }
    
    .node-card h3 {
      margin-top: 0;
    }
    
    .node-status {
      display: inline-block;
      padding: 0.25rem 0.5rem;
      border-radius: 3px;
      font-size: 0.8rem;
      margin-bottom: 0.5rem;
    }
    
    .status-online {
      background-color: #d4edda;
      color: #155724;
    }
    
    .status-offline {
      background-color: #f8d7da;
      color: #721c24;
    }
    
    .status-rendering {
      background-color: #cce5ff;
      color: #004085;
    }
  </style>
</head>
<body>
  <div class="app-container">
    <div class="sidebar">
      <div class="logo">
        <h2>SheepFarm</h2>
      </div>
      <nav>
        <ul>
          <li><a href="/dashboard">Dashboard</a></li>
          <li><a href="/clients" class="active">Clients</a></li>
        </ul>
      </nav>
      <div class="logout">
        <a href="/logout">Logout</a>
      </div>
    </div>
    
    <div class="main-content">
      <header>
        <h1>Farm Management</h1>
        <div class="user-info">
          Welcome, <%= username %>
        </div>
      </header>
      
      <div class="grid-container">
        <!-- Sheep Clients Section -->
        <div class="clients-content">
          <div class="clients-grid">
            <h2>Sheep Clients</h2>
            <div id="clientsList" class="grid">
              <% if (clients.length > 0) { %>
                <% clients.forEach(client => { %>
                  <div class="client-card">
                    <h3><%= client.name %></h3>
                    <p>Breed: <%= client.breed %></p>
                    <p>Age: <%= client.age %></p>
                  </div>
                <% }); %>
              <% } else { %>
                <p class="no-data">No clients available</p>
              <% } %>
            </div>
          </div>
        </div>
        
        <!-- Render Nodes Section -->
        <div class="render-nodes">
          <div class="actions">
            <button id="refreshNodesBtn" class="action-button">Refresh Nodes</button>
            <button id="startRenderBtn" class="action-button">Start Rendering</button>
            <button id="stopRenderBtn" class="action-button">Stop Rendering</button>
          </div>
          
          <div class="nodes-grid">
            <h2>Render Nodes</h2>
            <div id="renderNodesList" class="grid">
              <!-- Render nodes will be populated here via WebSocket -->
              <p class="no-data">No render nodes connected</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <script>
    const clientsList = document.getElementById('clientsList');
    const renderNodesList = document.getElementById('renderNodesList');
    const refreshNodesBtn = document.getElementById('refreshNodesBtn');
    const startRenderBtn = document.getElementById('startRenderBtn');
    const stopRenderBtn = document.getElementById('stopRenderBtn');
    
    // Connect WebSocket
    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
    const socket = new WebSocket(`${protocol}//${window.location.host}`);

    // Handle render node actions
    refreshNodesBtn.addEventListener('click', () => {
      socket.send(JSON.stringify({
        type: 'getNodes'
      }));
    });
    
    startRenderBtn.addEventListener('click', () => {
      socket.send(JSON.stringify({
        type: 'renderingState',
        isRendering: true
      }));
    });
    
    stopRenderBtn.addEventListener('click', () => {
      socket.send(JSON.stringify({
        type: 'renderingState',
        isRendering: false
      }));
    });
    
    // WebSocket message handling
    socket.onmessage = function(event) {
      try {
        const message = JSON.parse(event.data);

        if (message.type === 'clientsList') {
          console.log("Received updated client list:", message.data); // Debugging line

          message.data.forEach(client => {
            const existingClientEl = document.getElementById(`client-${client.sessionId}`);

            if (existingClientEl) {
              // ✅ Update only the Last Seen timestamp dynamically
              document.getElementById(`lastSeen-${client.sessionId}`).innerText = new Date(client.lastSeen).toLocaleString();
            } else {
              // ✅ Create a new client entry if it doesn't exist
              const clientEl = document.createElement('div');
              clientEl.className = 'client-card';
              clientEl.id = `client-${client.sessionId}`; // Assign an ID for updates

              clientEl.innerHTML = `
                <h3>${client.hostname}</h3>
                <p>Files Rendered: ${client.files.length}</p>
                <p>Status: ${client.isRendering ? 'Rendering' : 'Idle'}</p>
                <p>Last Seen: <span id="lastSeen-${client.sessionId}">${new Date(client.lastSeen).toLocaleString()}</span></p>
              `;

              clientsList.appendChild(clientEl);
            }
          });
        }
      } catch (error) {
        console.error('Error handling message:', error);
      }
    };


    // Request initial data
    socket.onopen = function() {
      socket.send(JSON.stringify({
        type: 'getClients'
      }));
      
      socket.send(JSON.stringify({
        type: 'getNodes'
      }));
    };
    
    socket.onerror = function(error) {
      console.error('WebSocket error:', error);
    };

  </script>
</body>
</html>